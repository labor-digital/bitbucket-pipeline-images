async function globalTeardown() {
	try {
		if (!process.env.BITBUCKET_REPO_OWNER || !process.env.BITBUCKET_REPO_SLUG || !process.env.BITBUCKET_COMMIT) {
			console.log("We're not running in bitbucket pipelines, so we skip reporting.");
			return;
		}
		
		const testResultsJson = JSON.parse(fs.readFileSync(process.env.TEST_ROOT_DIR + '/tests/test-reports/results.json').toString());
		let data = {
			"title": "Playwright Image Snapshot Testing",
			"details": "This report is auto generated by our Playwright Image Snapshot Testing pipe.",
			"report_type": "TEST",
			"reporter": "playwright-snapshots",
			"result": testResultsJson.stats.skipped == 0 && testResultsJson.stats.unexpected == 0 && testResultsJson.stats.flaky == 0 ? "PASSED" : "FAILED",
			"data": [
				{
					"title": "Duration",
					"type": "DURATION",
					"value": testResultsJson.stats.duration
				},
				{
					"title": "Test count",
					"type": "NUMBER",
					"value": testResultsJson.stats.expected + testResultsJson.stats.skipped + testResultsJson.stats.unexpected + testResultsJson.stats.flaky
				},
				{
					"title": "Tests passed",
					"type": "NUMBER",
					"value": testResultsJson.stats.expected
				},
				{
					"title": "Tests failed",
					"type": "NUMBER",
					"value": testResultsJson.stats.skipped + testResultsJson.stats.unexpected + testResultsJson.stats.flaky
				}
			]
		};
		
		const url = "https://api.bitbucket.org/2.0/repositories/"+process.env.BITBUCKET_REPO_OWNER+"/"+process.env.BITBUCKET_REPO_SLUG+"/commit/"+process.env.BITBUCKET_COMMIT+"/reports/jest-snapshots-001";
		const response = await fetch(url, {
			method: 'PUT',
			headers: {
				"Content-Type": "application/json",
				'Authorization': 'Basic ' + btoa(process.env.BITBUCKET_DEFAULT_BOT_USER+':'+process.env.BITBUCKET_DEFAULT_BOT_PASS)
			},
			body: JSON.stringify(data),
		});
		if (!response.ok) {
			throw new Error(`Response status: ${response.status}`);
		}
		
		const json = await response.json();
	} catch (error) {
		console.log("Error in teardown, but we will not throw an error, because the tests should be responsible of the exit code: ", error.message);
	}
}

export default globalTeardown;